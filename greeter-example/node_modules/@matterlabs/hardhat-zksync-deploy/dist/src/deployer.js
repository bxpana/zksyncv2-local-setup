"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployer = void 0;
const zk = __importStar(require("zksync-web3"));
const ethers = __importStar(require("ethers"));
const helpers_1 = require("./helpers");
const ARTIFACT_FORMAT_VERSION = 'hh-zksolc-artifact-1';
const SUPPORTED_L1_TESTNETS = ['mainnet', 'rinkeby', 'ropsten', 'kovan', 'goerli'];
/**
 * An entity capable of deploying contracts to the zkSync network.
 */
class Deployer {
    constructor(hre, zkWallet) {
        this.hre = hre;
        // Initalize two providers: one for the Ethereum RPC (layer 1), and one for the zkSync RPC (layer 2). We will need both.
        const ethNetwork = hre.config.zkSyncDeploy.ethNetwork;
        const ethWeb3Provider = SUPPORTED_L1_TESTNETS.includes(ethNetwork)
            ? ethers.getDefaultProvider(ethNetwork)
            : new ethers.providers.JsonRpcProvider(ethNetwork);
        const zkWeb3Provider = new zk.Provider(hre.config.zkSyncDeploy.zkSyncNetwork);
        this.zkWallet = zkWallet.connect(zkWeb3Provider).connectToL1(ethWeb3Provider);
        this.ethWallet = this.zkWallet.ethWallet();
    }
    static fromEthWallet(hre, ethWallet) {
        return new Deployer(hre, new zk.Wallet(ethWallet.privateKey));
    }
    /**
     * Loads an artifact and verifies that it was compiled by `zksolc`.
     *
     * @param contractNameOrFullyQualifiedName The name of the contract.
     *   It can be a contract bare contract name (e.g. "Token") if it's
     *   unique in your project, or a fully qualified contract name
     *   (e.g. "contract/token.sol:Token") otherwise.
     *
     * @throws Throws an error if a non-unique contract name is used,
     *   indicating which fully qualified names can be used instead.
     *
     * @throws Throws an error if an artifact was not compiled by `zksolc`.
     */
    async loadArtifact(contractNameOrFullyQualifiedName) {
        const artifact = await this.hre.artifacts.readArtifact(contractNameOrFullyQualifiedName);
        // Verify that this artifact was compiled by the zkSync compiler, and not `solc` or `vyper`.
        if (artifact._format !== ARTIFACT_FORMAT_VERSION) {
            throw (0, helpers_1.pluginError)(`Artifact ${contractNameOrFullyQualifiedName} was not compiled by zksolc`);
        }
        return artifact;
    }
    /**
     * Estimates the price of calling a deploy transaction in a certain fee token.
     *
     * @param artifact The previously loaded artifact object.
     * @param constructorArguments List of arguments to be passed to the contract constructor.
     * @param feeToken Address of the token to pay fees in. If not provided, defaults to ETH.
     *
     * @returns Calculated fee in wei of the corresponding fee token.
     */
    async estimateDeployFee(artifact, constructorArguments, feeToken) {
        const factoryDeps = await this.extractFactoryDeps(artifact);
        const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, this.zkWallet);
        // Encode deploy transaction so it can be estimated.
        const deployTx = factory.getDeployTransaction(...constructorArguments, {
            customData: {
                factoryDeps,
                feeToken: feeToken !== null && feeToken !== void 0 ? feeToken : zk.utils.ETH_ADDRESS,
            },
        });
        deployTx.from = this.zkWallet.address;
        const gas = await this.zkWallet.provider.estimateGas(deployTx);
        const gasPrice = await this.zkWallet.provider.getGasPrice();
        return gas.mul(gasPrice);
    }
    /**
     * Sends a deploy transaction to the zkSync network.
     * For now, it will use defaults for the transaction parameters:
     * - fee amount is requested automatically from the zkSync server.
     *
     * @param artifact The previously loaded artifact object.
     * @param constructorArguments List of arguments to be passed to the contract constructor.
     * @param overrides Optional object with additional deploy transaction parameters.
     *
     * @returns A contract object.
     */
    async deploy(artifact, constructorArguments, overrides) {
        var _a;
        const factoryDeps = await this.extractFactoryDeps(artifact);
        const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, this.zkWallet);
        const _b = overrides !== null && overrides !== void 0 ? overrides : {}, { feeToken, customData } = _b, _overrides = __rest(_b, ["feeToken", "customData"]);
        // Encode and send the deploy transaction providing both fee token and factory dependencies.
        const contract = await factory.deploy(...constructorArguments, Object.assign(Object.assign({}, _overrides), { customData: Object.assign(Object.assign({}, customData), { factoryDeps, feeToken: (_a = feeToken !== null && feeToken !== void 0 ? feeToken : customData === null || customData === void 0 ? void 0 : customData.feeToken) !== null && _a !== void 0 ? _a : zk.utils.ETH_ADDRESS }) }));
        await contract.deployed();
        return contract;
    }
    /**
     * Extracts factory dependencies from the artifact.
     *
     * @param artifact Artifact to extract dependencies from
     *
     * @returns Factory dependencies in the format expected by SDK.
     */
    async extractFactoryDeps(artifact) {
        // Load all the dependency bytecodes.
        // We transform it into an array of bytecodes.
        const factoryDeps = [];
        for (const dependencyHash in artifact.factoryDeps) {
            const dependencyContract = artifact.factoryDeps[dependencyHash];
            const dependencyBytecodeString = (await this.hre.artifacts.readArtifact(dependencyContract)).bytecode;
            factoryDeps.push(dependencyBytecodeString);
        }
        return factoryDeps;
    }
}
exports.Deployer = Deployer;
//# sourceMappingURL=deployer.js.map